// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @unique @default(uuid())
  email             String              @unique
  userName          String              @unique
  role              String              @default("user")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  password          String?
  photos            Photos[]
  userImages        UserImages[]
  sessions          Session[]
  VerificationToken VerificationToken[]
  accounts          Account[]
  likes             Like[]
}

model UserImages {
  id                 String   @id @unique @default(uuid())
  cloudinaryPublicId String?  @unique
  imageUrl           String
  flagged            Boolean? @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Photos {
  id                 String   @id @unique @default(uuid())
  cloudinaryPublicId String   @unique
  imageUrl           String
  city               String   @default("Unknown")
  description        String   @default("No description")
  title              String   @default("No title")
  flagged            Boolean? @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId             String
  likes              Like[]
}

model Session {
  id           String   @id @unique @default(uuid())
  expires      DateTime
  sessionToken String   @unique

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model VerificationToken {
  id      String   @id @unique @default(uuid())
  token   String   @unique
  expires DateTime
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId  String

  @@unique([token, id])
}

model Like {
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String
  photo     Photos   @relation(fields: [photoId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  photoId   String

  @@id([photoId, userId])
  @@index([photoId, userId])
  @@index([photoId])
  @@index([userId])
}
